(defvar is-sound-hover false) 
(defpoll volume :interval "1s" :initial 30 "scripts/get-vol")
(defwidget sound[]
 (metric-icon-revealer 
    :value {volume != "off" ? volume : 0} 
    :class "widget sound"
    :hover-var is-sound-hover
    :hover-varname "is-sound-hover"
    :onchange "amixer set Master {}%"
    :tooltip "${volume != "off" ? "${volume}%" : "off"}"
    :icon-path "img/volume/${volume == "off" ? "volume_off.svg" 
      : volume==0 ? "volume_mute.svg"
      : volume >= 50 ? "volume_up.svg" 
      : "volume_down.svg"}"))


(defvar is-brightness-hover false) 
(defpoll brightness :interval "1s" :initial 30 "scripts/get-brightness")
(defwidget brightness[]
 (metric-icon-revealer 
    :value brightness 
    :class "widget brightness"
    :hover-var is-brightness-hover
    :hover-varname "is-brightness-hover"
    :onchange "brightnessctl set {}% -n 1%"
    :tooltip "${brightness}%"
    :icon-path "img/brightness/${brightness < 5 ? "brightness_min.svg" 
      : brightness < 45 ? "brightness_low.svg" 
      : brightness < 55 ? "brightness-medium.svg" 
      : "brightness_high.svg"}"))


(defpoll active-network-name :interval "2s" :initial "" "scripts/get-network-name")
(defpoll active-network-strength :interval "2s" :initial "" "scripts/get-current-network-strength")
(defwidget network[]
  (button :class "widget network" :onclick "scripts/toggle-wifi"
   (box :space-evenly false :spacing 10
    (tooltip 
       (label :class "widget network tooltip" 
          ; if there is both a name and strength it is wlan, if there is only a name it is LAN
          :text {active-network-name != "" && active-network-strength != "" ? "${active-network-name} ${active-network-strength}%" 
                    : active-network-name != "" ? active-network-name 
                    : "not connected"})
       (image :path "img/network/${active-network-name != "" && active-network-strength == "" ? "lan.svg" 
          : active-network-name == "" ? "off.svg" 
          : active-network-strength < 30 ? "unusable.svg" 
          : active-network-strength < 50 ? "weak.svg" 
          : active-network-strength < 70 ? "fair.svg" 
          : active-network-strength < 90 ? "good.svg" 
          : "excellent.svg" }" 
          :image-height 15)))))

(defpoll battery-percentage :interval "5s" :initial -1 "scripts/battery-percentage")
(defpoll battery-state :interval "5s" :initial "" "scripts/battery-state")
(defpoll battery-time-remaining :interval "5s" :initial "" "scripts/battery-time-remaining")
(defvar selected-battery-state 0)
(defwidget battery[]
 (box  
  (stack :selected selected-battery-state :transition "crossfade" :same-size false
   (button :onclick "eww update selected-battery-state=1"
      (icon-text 
          :icon_path "img/battery/${battery-state== "charging" ? "charging.svg" 
            : battery-percentage > 95 ? "full.svg" 
            : battery-percentage > 85 ? "6_bar.svg"
            : battery-percentage > 70 ? "5_bar.svg"
            : battery-percentage > 55 ? "4_bar.svg"
            : battery-percentage > 40 ? "3_bar.svg"
            : battery-percentage > 25 ? "2_bar.svg"
            : battery-percentage > 10 ? "1_bar.svg"
            : battery-percentage > 0 ? "0_bar.svg"
            : "unknown.svg"
          }" 
          :text "${battery-percentage != "" ? "${battery-percentage}%" : ""}"
          :class "battery"))
   (button :onclick "eww update selected-battery-state=0"
        (label :class "widget battery" :text battery-time-remaining)))))
    
(defpoll time-HM :interval "1s" "date '+%H:%M'")
(defpoll time-large :interval "1s" "date '+%d. %b %H:%M'")
(defvar selected-time-state 0)
(defwidget time[]
 (box :class "widget time"
  (stack :selected selected-time-state :transition "crossfade" :same-size false
   (button :onclick "eww update selected-time-state=1"
     (label :text time-HM))
   (button :onclick "eww update selected-time-state=0"
     (label :text time-large)))))
